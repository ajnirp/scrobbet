#!/usr/bin/env python3
# -*- coding: UTF-8 -*-
# TODO: http://stackoverflow.com/questions/11575398/how-can-i-save-my-secret-keys-and-password-securely-in-my-version-control-system
# also, get docopt to work
# also, check if not connected to the internet or if last.fm is not accessible for whatever reason

######################
# To run: ./scrobbet #
######################

"""
Scrobbet, the unofficial CLI scrobbler for Last.fm.

Usage:
  scrobbet (-h | --help)
  scrobbet --version
  scrobbet --authorize
  scrobbet (-s | --scrobble) [--title=<name>] [--artist=<name>] [--album=<name>] [--directory=<name>]
  scrobbet 

Options:
  -h --help           Show this screen.
  --version           Show version.
  --authorize         Authorize Scrobbet to access your account on last.fm
  -s --scrobble       Scrobble all music tracks in the current directory to last.fm
  --title=<name>      Scrobble only tracks with title 'name'
  --artist=<name>     Scrobble only tracks by artist 'name'
  --album=<name>      Scrobble only tracks from the album 'name'
  --directory=<name>  Scrobble only tracks in directory 'name' [default: .]
"""

import requests # making HTTP requests
import taglib # reading IDv3 tags
import os # listing contents of a dir
import magic # inferring MIME-types
import docopt # CLI argument parsing
import signal, sys # intercepting SIGINT
import webbrowser # user authorization
from time import time # getting the current time
from hashlib import md5 # 32-char hex digest of a string
from bs4 import BeautifulSoup as bs # parsing XML responses from Last.fm
from secrets import * # api key, secret and session key

SCROBBLE_ROOT = 'http://ws.audioscrobbler.com/2.0/'
DOT_FILE = './.scrobbet'
ATTRIBUTE_LIST = ['artist', 'title', 'album']

supported_mime_types = set([
	'audio/mpeg',
	'audio/mp4',
	'audio/m4a',
	'audio/ogg',
	'audio/flac',
	'audio/wav',
	'audio/aiff'
])

# check if user is connected to the internet
def check_connectivity(timeout=5):
	try:
		# hit example.com
		_ = requests.get('http://93.184.216.119', timeout=timeout)
		return True
	except requests.ConnectionError:
		print("You're not connected to the internet!")

# get authentication token in order to get user authorization
def get_auth_token():
	auth_token_response = requests.get(SCROBBLE_ROOT, { 'api_key': API_KEY })
	parsed_response = bs(auth_token_response)
	return parsed_response.token

# get authorization from user to scrobble to their account
def request_authorization(auth_token):
	print('Scrobbet needs your permission to scrobble to your account. Opening a browser window...')
	url = 'http://www.last.fm/api/auth/?api_key=' + API_KEY + '&token=' + auth_token
	webbrowser.open_new(url)
	print("Please select 'Authorize'!")

# set up a web service session
def fetch_web_service_session():
	pass #todo

# construct API signature from the params dict
def construct_api_sig(params):
	api_sig_string = ''.join(key + params[key] for key in sorted(params.keys())) + SECRET
	return md5(api_sig_string.encode('utf-8')).hexdigest()

# build the final params dict from the track metadata
def construct_params(tags):
	# read in the tags
	params = {
		'method': 'track.scrobble',
		'api_key': API_KEY,
		'sk': SESSION_KEY,
		'timestamp': str(int(time())),
		'artist': tags['ARTIST'][0],
		'track': tags['TITLE'][0],
		'album': tags['ALBUM'][0],
		'albumArtist': tags['ALBUMARTIST'][0]
	}
	params['api_sig'] = construct_api_sig(params)
	return params

# get IDv3 tags for a music file
def get_tags(filename):
	return taglib.File(filename).tags

# set up the params and scrobble!
def scrobble(filename):
	params = construct_params(get_tags(filename))
	scrobble_response = requests.post(SCROBBLE_ROOT, params=params)
	parsed_response = bs(scrobble_response.text)
	return parsed_response

# is 'filename' an audio file?
def is_audio_file(filename):
	mime_type = magic.from_file(filename, mime=True).decode('utf-8')
	return mime_type in supported_mime_types

# this function returns True if 'tags' matches the user-specified constraints, 'False' otherwise
def do_tags_match_args(arguments, tags):
	return all(arguments['--' + attribute] is False # user specified no constraints
		       or tags[attribute.upper()] == arguments['--' + attribute] # user did specify constraints, check 'em
		       for attribute in ATTRIBUTE_LIST)

# return a list of all the audio files in 'directory'
# satisfying the user-specified constraints, like artist and album
def grab_music_files(arguments):
	directory = arguments['--directory']
	musicfiles = [
		filename for filename in os.listdir(directory)
		         if os.path.isfile(filename) and is_audio_file(filename)
	]
	tags = [taglib.File(f).tags for f in musicfiles]

# return a new list in which the elements of 'musicfiles' are sorted
# in ascending order of their IDv3 tracknumber field
def sort_by_tracknumber(musicfiles):
	tracknumbers = [int(taglib.File(f).tags['TRACKNUMBER'][0].split('/')[0]) for f in musicfiles]
	return [filename for filename, tracknum in sorted(zip(musicfiles, tracknumbers), key=lambda x: x[1])]

# get the music files in the directory, sorted by IDv3 tracknumber
def grab_sorted_music_files(arguments):
	return sort_by_tracknumber(grab_music_files(arguments))

def scrobble(arguments):
	# signal.signal(signal.SIGINT, sigint_handler)
	for filename in grab_sorted_music_files(arguments):
		response = scrobble(filename)
		lfm_status = response.lfm['status']
		if lfm_status == 'ok':
			print('Scrobbled', filename)

if __name__ == "__main__":
	arguments = docopt.docopt(__doc__, version='Scrobbet 0.1')
	# print(arguments)
	if arguments['--scrobble']:
		print("Scrobbling tracks in '" + arguments['--directory'] + "' matching:")
		for attribute in ATTRIBUTE_LIST:
			attr_val = arguments['--' + attribute]
			if attr_val: print(attribute + ':', attr_val)
			scrobble(arguments)
#!/usr/bin/env python3
# -*- coding: UTF-8 -*-

"""
Scrobbet, the unofficial CLI scrobbler for Last.fm.

Usage:
  scrobbet (-h | --help)
  scrobbet --version
  scrobbet --authorize
  scrobbet -f <filename>
  scrobbet (-s | --scrobble) [--title=<name>] [--artist=<name>] [--album=<name>] [--directory=<name>] [--tracknumber=<num>] [-r <num> | --repeat=<num>]

Options:
  -h --help           Show this screen.
  --version           Show version.
  --authorize         Authorize Scrobbet to access your account on last.fm
  -s --scrobble       Scrobble all music tracks in the current directory to last.fm
  -f --file <name>    Scrobble all music tracks listed in the file 'name'
  --title=<name>      Scrobble only tracks with title 'name'
  --artist=<name>     Scrobble only tracks by artist 'name'
  --album=<name>      Scrobble only tracks from the album 'name'
  --directory=<name>  Scrobble only tracks in directory 'name' [default: .]
  --tracknumber=<num> Scrobble only the track with tracknumber 'num'
  -r --repeat <num>   Scrobble 'num' number of times [default: 1]
"""

from time import time # getting the current time
from hashlib import md5 # 32-char hex digest of a string
from bs4 import BeautifulSoup as bs # parsing XML responses from Last.fm
from math import log10, ceil # get maximum number of digits required to write a tracknumber
from itertools import accumulate # add track times for an album
import requests # making HTTP requests
import taglib # reading IDv3 tags
import os # listing contents of a dir
import mimetypes # inferring MIME-types
import docopt # CLI argument parsing
import signal, sys # intercepting SIGINT

from constants import *
import auth
import utils

# build the final params dict from the track metadata
def construct_params(tags, timestamp):
    sk = auth.get_local_session_key()
    if not sk:
        print(utils.color_string('No session key found :(', 'error'))
        exit(1)
    params = {
        'sk': sk,
        'timestamp': timestamp,
        'artist': tags['ARTIST'][0],
        'track': tags['TITLE'][0],
        'album': tags['ALBUM'][0]
    }
    return params

def construct_params_minimal(track_data):
    artist, _, title, album = track_data
    sk = auth.get_local_session_key()
    if not sk:
        print(utils.color_string('No session key found :(', 'error'))
        exit(1)
    params = {
        'sk': sk,
        'artist': artist,
        'track': title,
        'album': album,
        'timestamp': str(int(time()))
    }
    return params

# make a POST request to the last.fm API asking to scrobble a track using the IDv3 tags
def make_scrobble_request(tags, timestamp):
    params = construct_params(tags, timestamp)
    scrobble_response = requests.post(WEBAPP + 'scrobble', params=params)
    parsed_response = bs(scrobble_response.text)
    return parsed_response, utils.check_response_error(parsed_response)

# make a POST request to the last.fm API asking to scrobble a track using the tuple read from a file
def make_minimal_scrobble_request(track_data):
    params = construct_params_minimal(track_data)
    scrobble_response = requests.post(WEBAPP + 'scrobble', params=params)
    parsed_response = bs(scrobble_response.text)
    return parsed_response, utils.check_response_error(parsed_response)

# this function returns True if 'tags' matches the user-specified constraints, 'False' otherwise
def do_tags_match_args(tags, arguments):
	return all(arguments['--' + attribute] is None # user specified no constraints
			   or arguments['--' + attribute] in tags[attribute.upper()] # user did specify constraints, so check them
			   for attribute in ATTRIBUTE_LIST)

# return a list of all the audio files in 'directory' sorted by tracknumber and
# satisfying the user-specified constraints, like artist and album
def grab_sorted_music_files(arguments):
    directory = os.path.realpath(arguments['--directory'])
    musicfiles = [] # i don't like list comprehensions
    for filename in os.listdir(directory):
        fullpath = directory + '/' + filename
        if os.path.isfile(fullpath) and utils.is_audio_file(fullpath):
            musicfiles.append(fullpath)
    # zip the files together with their respective tags
    files_tags_zipped = [(f, taglib.File(f).tags, taglib.File(f).length) for f in musicfiles]
    # filter out files not satisfying the user constraints
    files_tags_zipped = filter(lambda x: do_tags_match_args(x[1], arguments), files_tags_zipped)
    # sort the files by track number
    files_tags_zipped = sorted(files_tags_zipped, key=lambda x: int(x[1]['TRACKNUMBER'][0].split('/')[0]))
    return files_tags_zipped

# display the list of tracks that will be scrobbled, using the IDv3 tag data
def announce_tracks(files_tags_zipped, times):
    if list(files_tags_zipped) == []:
        print("Couldn't find any tracks for these parameters")
        print("Exiting...")
        exit(0)
    print('The following tracks will be scrobbled', times, 'times:')
    num_tracks = len(list(files_tags_zipped))
    for _, tags, _ in files_tags_zipped:
        artist = tags['ARTIST'][0]
        title = tags['TITLE'][0]
        album = tags['ALBUM'][0]
        tracknumber = str(tags['TRACKNUMBER'][0].split('/')[0])
        print('\t', tracknumber.zfill(ceil(log10(num_tracks))), artist, '-', title, '-', album)

# display the list of tracks that will be scrobbled, using just the tuple read from a file
def announce_tracks_minimal(track_data):
    if track_data == []:
        print("Couldn't find any tracks in the file")
        print("Exiting...")
        exit(0)
    print('The following tracks will be scrobbled:')
    num_tracks = len(track_data)
    for track in track_data:
        artist, tracknumber, title, album = track
        print('\t', tracknumber.zfill(ceil(log10(num_tracks))), artist, '-', title, '-', album)

# ask the user if they want to go ahead with the scrobble, and exit if they say no
def confirm_scrobbles():
    if utils.yes_no_prompt('Do you want to scrobble these tracks?'):
        print('scrobbling...')
    else:
        print('exiting...')
        exit(1)

# scrobble given only the artist, title, tracknumber and album
def minimal_scrobble(tracks_to_scrobble):
    announce_tracks_minimal(tracks_to_scrobble)
    confirm_scrobbles()
    for track_data in tracks_to_scrobble:
        response, error = make_minimal_scrobble_request(track_data)
        title = track_data[2]
        if error:
            print(utils.color_string('\tFailed: ', 'error') + title + '. ' + error)
        else:
            print(utils.color_string('\tScrobbled: ', 'success') + title)

# driver function
def scrobble(arguments):
    tracks_to_scrobble = grab_sorted_music_files(arguments)
    # print(arguments); exit()
    announce_tracks(tracks_to_scrobble, arguments['--repeat'])
    confirm_scrobbles()
    now = int(time())
    total_length = sum(length for _, _, length in tracks_to_scrobble)
    timestamp = now - total_length
    for _ in range(int(arguments['--repeat'])):
        for _, tags, length in tracks_to_scrobble:
            timestamp += length
            title = tags['TITLE'][0]
            response, error = make_scrobble_request(tags, str(timestamp))
            if error:
                print(utils.color_string('\tFailed: ', 'error') + title + '. ' + error)
            else:
                print(utils.color_string('\tScrobbled: ', 'success') + title)

def announce_arguments(arguments):
    print("Searching tracks in directory '" + arguments['--directory'] + "' matching:")
    for attribute in ATTRIBUTE_LIST:
        attr_val = arguments['--' + attribute]
        if attr_val: print('\t' + attribute.title() + ':', attr_val)
        else: print('\tAny', attribute)

def scrobble_from_file(fname):
    with open(fname, 'r') as f:
        tracks_to_scrobble = [eval(line.strip()) for line in f.readlines()]
        tracks_to_scrobble.sort(key=lambda t: int(t[1]))
        minimal_scrobble(tracks_to_scrobble)

if __name__ == "__main__":
    # register the signal handler
    signal.signal(signal.SIGINT, utils.sigint_handler)
    # parse command-line args and dump them in a dict
    arguments = docopt.docopt(__doc__, version='Scrobbet 0.1')
    if arguments['--authorize']:
        auth.authorize()
    if arguments['--scrobble']:
        announce_arguments(arguments)
        scrobble(arguments)
    elif arguments['--file']:
        filename = arguments['--file']
        scrobble_from_file(filename)
